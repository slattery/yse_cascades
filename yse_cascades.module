<?php

use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\menu_item_extras\Entity\MenuItemExtrasMenuLinkContent;
use Drupal\menu_item_extras\Utility\Utility as ExtraUtils;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent as MenuLinkContentBase;
use Drupal\system\Entity\Menu;

/**
 * Implements hook_help().
 */
function yse_cascades_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.yse_cascades') {
    $text = file_get_contents(__DIR__ . '/README.md');
    if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parser_manager */
      $parser_manager = \Drupal::service('plugin.manager.markdown.parser');
      $parser = $parser_manager->getDefaultParser([
        'render_strategy' => ['type' => 'none'],
      ]);
      return $parser->parse($text);
    }
  }
  return NULL;
}


/**
 * Implements hook_entity_base_field_info().
 *
 * Adds a view mode field for later using it per menu item and manage render
 * based on the view mode.
 * EntityTypeInterface
 * @see hook_entity_base_field_info()
 */

function yse_cascades_entity_base_field_info($entity_type) {
  // every hook is being loaded with Drupal\Core\Entity\ContentEntityType
  // I have no idea why

  $c = get_class($entity_type);
  $i = $entity_type->get('id');
  if ($i == 'menu_link_content' ){
    if ($c == 'Drupal\Core\Entity\ContentEntityType') {
      //will drupal notice?
      $entity_type = \Drupal::service('entity_type.manager')->getDefinition($i);
    }
    $fields = [];
    $fields['primary'] = \Drupal::service('yse_cascades.field_utils')->getPrimaryFieldDefinition();
    return $fields;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 * Puts our source counter in the form config pages
 */
function yse_cascades_entity_extra_field_info() {
  $extra = \Drupal::service('yse_cascades.field_utils')->get_entity_extra_field_info();
  return $extra;
}


/**
 * Implements hook_form_FORM_ID_alter()
 */
function yse_cascades_form_node_form_alter(&$form, Drupal\Core\Form\FormState $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!$form_object || !$form_object instanceof ContentEntityForm) {
      return;
  }
  \Drupal::service('yse_cascades.nodeform_utils')->form_node_form_alter($form, $form_state, $form_id);
}

/*
 * it appears that on ajax we miss something like   // \Drupal::formBuilder()->doBuildForm()
 * so we recreate much of that here.
 */

 /**
 * Implements hook_node_form_alter().
 */
function yse_cascades_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form_object = $form_state->getFormObject();

  if (!$form_object || !$form_object instanceof ContentEntityForm) {
      return;
  }
  \Drupal::service('yse_cascades.field_utils')->node_form_alter($form, $form_state, $form_id);
}

//function yse_cascades_preprocess_field_multiple_value_form(&$variables) {}

function yse_cascades_preprocess_form_element(&$variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents'])  && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){

    if (in_array($variables['element']['#type'], ['checkbox','textfield','select'], TRUE)) {
      if (empty($variables['element']['#name']) && !empty($variables['element']['#attributes']['id']) ){
        $variables['element']['#name'] = $variables['element']['#attributes']['id'];
      }
      if (isset($variables['element']['#field_prefix']) ){
        $variables['prefix'] = $variables['element']['#field_prefix'];
        $variables['attributes']['class'][] = 'field_prefix__label__menu_extra';
      }
    }

    //remove malformed classes
    if (isset($variables['attributes']['class'])){
      $variables['attributes']['class'] = array_values(array_filter($variables['attributes']['class'], fn ($m) => !in_array($m, ['js-form-item-','form-item-'])));
    }

    if (isset($variables['element']['#attributes']['id']) ){
      $variables['attributes']['class'][] = 'js-form-item-' . $variables['element']['#attributes']['id'];
      $variables['attributes']['class'][] = 'form-item-' . $variables['element']['#attributes']['id'];
    }

    if (!isset($variables['type']) && isset($variables['element']['#type'])){
      $variables['type'] = $variables['element']['#type'];
    }

    if (!isset($variables['name']) && isset($variables['element']['#name'])){
      $variables['name'] = $variables['element']['#name'];
    }

    $description_id = $variables['element']['#attributes']['id'] . '--description';
    $description_attributes['id'] = $description_id;
    $variables['description_display'] = $variables['element']['#description_display'];
    if ($variables['element']['#description_display'] === 'invisible') {
      $description_attributes['class'][] = 'visually-hidden';
    }
    $description_attributes['data-drupal-field-elements'] = 'description';
    $variables['description']['attributes'] = new Attribute($description_attributes);
    $variables['description']['content'] = $variables['element']['#description'];

    // Add the description's id to the fieldset aria attributes.
    $variables['attributes']['aria-describedby'] = $description_id;

  }
}

function yse_cascades_preprocess_form_element_label(&$variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#id']) && (strpos($variables['element']['#id'], 'edit-menu-extra') === 0)){
    if (empty($variables['element']['#for']) && !empty($variables['element']['#id']) ){
      $variables['attributes']['for'] = $variables['element']['#id'];
    }
    if (isset($variables['element']['#for']) ){
      $variables['attributes']['for'] = $variables['element']['#for'];
    }
  }
}

function yse_cascades_preprocess_input(&$variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents'])  && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){
    if (in_array($variables['element']['#type'], ['checkbox','textfield'], TRUE)) {
      $variables['attributes']['class'][] = 'input' . '__' . $variables['element']['#type'] . '__menu_extra';
    }
  }
}

function yse_cascades_preprocess_select(&$variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents'])  && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){
      $variables['attributes']['class'][] = 'select__menu_extra';
  }
}

function yse_cascades_preprocess_textarea(&$variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents'])  && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){
      $variables['attributes']['class'][] = 'textarea__menu_extra';
  }
}


function yse_cascades_preprocess_container(&$variables) {

  if (!isset($variables['element']['#attributes'])){
     $variables['element'] += ['#attributes' => []];
  }
  //operate only on menu-extra elements
  if (isset($variables['element']['#parents'])  && count($variables['element']['#parents']) > 1 && $variables['element']['#parents'][0] == 'menu' &&  $variables['element']['#parents'][1] == 'extra'){
    $variables['attributes']['class'][] = 'container__menu_extra';
    $variables['attributes']['class'][] = 'js-form-wrapper';
    $variables['attributes']['class'][] = 'form-wrapper';
    // Assign an html ID.
    if (!isset($variables['element']['#attributes']['id'])) {
      if (isset($variables['element']['#id'])){
        $variables['attributes']['id'] = $variables['element']['#id'];
        $variables['attributes']['data-drupal-selector'] = $variables['element']['#id'];
      }
      elseif (isset($variables['element']['#parents'])){
        $parentstr = 'edit-' . str_replace('_', '-', implode('-', $variables['element']['#parents']));
        $variables['attributes']['id'] = $variables['element']['#id'] = $parentstr;
        $variables['attributes']['data-drupal-selector'] = $parentstr;
      }
    }
    $variables['has_parent'] = TRUE;
  }
}


/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function yse_cascades_menu_link_content_presave(EntityInterface $entity) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  if ($entity->hasField('primary')){

      $u   = $entity->getUrlObject();
      $p = ($u && $u->isRouted()) ? $u->getRouteParameters() : null;
      $nid = (isset($p) && !empty($p['node'])) ? $p['node'] : null;

      if (!empty($nid)){
        $checkprimary = \Drupal::entityQuery('menu_link_content')
        ->accessCheck(FALSE)
        ->condition('link.uri', 'entity:node/' . $nid)
        ->condition('primary', 1);

        if (!empty($entity->id())){
          $checkprimary->condition('id', $entity->id(), '<>');
        }
        $positives = $checkprimary->execute();
        $tally = count($positives);
      }

      if (isset($tally) && $tally === 0){
        $entity->set('primary', 1);
      }
      elseif ( $entity->{'primary'}->isEmpty || $entity->{'primary'}->getString() == '0' ) {
        //probably redundant to call set
          $entity->set('primary', FALSE);
      }
      elseif ( isset($tally) && $tally > 0 && $entity->{'primary'}->getString() == '1' ) {
        $links = MenuLinkContentBase::loadMultiple($positives);
        foreach ($links as $link){
          //double checking bc the query shouldn't allow this
          if ($link->id() != $entity->id()){
          $entity->set('primary', FALSE);
            $link->save();
          }
          //probably redundant to call set
          $entity->set('primary', 1);
        }
      }
    }
  }


/**
 * Implements hook_module_implements_alter().
 */
function yse_cascades_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_node_form_alter' || $hook == 'entity_base_field_info') {
    $group = $implementations['yse_cascades'];
    unset($implementations['yse_cascades']);
    $implementations['yse_cascades'] = $group;
  }
}


/**
 * Implements hook_theme_suggestions_form_element().
 */
function yse_cascades_theme_suggestions_form_element_alter(&$suggestions, $variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents']) && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){
    $suggestions[] = $variables['theme_hook_original'] . '__menu_extra';
  }
}


function yse_cascades_theme_suggestions_input_alter(&$suggestions, $variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents']) && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){
    $suggestions[] = 'input__' . $variables['element']['#type'] . '__nodeform';
  }

}

function yse_cascades_theme_suggestions_select_alter(&$suggestions, $variables) {
  //operate only on menu-extra elements
  if (isset($variables['element']['#field_parents'])  && count($variables['element']['#field_parents']) > 1 && $variables['element']['#field_parents'][0] == 'menu' &&  $variables['element']['#field_parents'][1] == 'extra'){
    $suggestions[] = 'select__' . $variables['element']['#type'] . '__menu_extra';
  }
}

